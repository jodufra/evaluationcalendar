<?php// This file is part of a local Moodle plugin//// You can redistribute it and/or modify it under the terms of the  GNU General Public License // as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.// This plugin is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; // without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  // See the GNU General Public License for more details.//// You should have received a copy of the GNU General Public License along with Moodle. // If not, see <http://www.gnu.org/licenses/>./** * [File Documentation] * * @package local_pfc * @copyright 2016 Instituto Politécnico de Leiria <http://www.ipleiria.pt> * @author Duarte Mateus <2120189@my.ipleiria.pt> * @author Joel Francisco <2121000@my.ipleiria.pt> * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later */defined('MOODLE_INTERNAL') || die();require_once($CFG->libdir . '/formslib.php');/** * * */class local_pfc_check_api_form extends moodleform {    protected function definition() {        $pfc_form = $this->_form;        // information        $pfc_form->addElement('static', '', '', get_string('checkapi_info', 'local_pfc'));        // radio buttons        $requestTypes = array();        $requestTypes[] = $pfc_form->createElement('radio', 'requesttype', '', get_string('checkapi_all','local_pfc'), 'all');        $requestTypes[] = $pfc_form->createElement('radio', 'requesttype', '', get_string('checkapi_calendars','local_pfc'), 'calendars');        $requestTypes[] = $pfc_form->createElement('radio', 'requesttype', '', get_string('checkapi_evaluations','local_pfc'), 'evaluations');        $requestTypes[] = $pfc_form->createElement('radio', 'requesttype', '', get_string('checkapi_evaluationTypes','local_pfc'), 'evaluation_types');        $pfc_form->addGroup($requestTypes, 'requestTypes', '', array(' '), false);        $pfc_form->setDefault('requesttype', 'all');        // submit button        $pfc_form->addElement('submit', 'submitbutton', get_string('checkapi_submit', 'local_pfc'));    }}/** * * */class local_pfc_synchronize_calendars_form extends moodleform {    protected function definition() {        $pfc_form = $this->_form;        // information        $pfc_form->addElement('static', '', '', get_string('synchronize_calendars_info', 'local_pfc'));        // radio buttons        $requestTypes = array();        $requestTypes[] = $pfc_form->createElement('radio', 'synchronize', '', get_string('synchronize_calendars_submit','local_pfc'), 'true');        $pfc_form->addGroup($requestTypes, 'Synchronize', '', array(' '), false);        $pfc_form->setDefault('synchronize', 'true');        // submit button        $pfc_form->addElement('submit', 'submitbutton', get_string('synchronize_calendars_submit', 'local_pfc'));    }}class local_pfc{    /**     *     *     */    function make_api_request_to_html($type = '') {        if($type == 'calendars'){            return $this->get_calendars_to_hmtl();        }elseif($type == 'evaluations'){            return $this->get_evaluations_to_hmtl();        }elseif($type == 'evaluation_types'){            return $this->get_evaluation_types_to_hmtl();        }else{            $result = array();            $result[] = $this->get_calendars_to_hmtl();            $result[] = $this->get_evaluations_to_hmtl();            $result[] = $this->get_evaluation_types_to_hmtl();            return implode('<br/>',$result);        }    }    /**     *     *     */    function get_calendars_to_hmtl() {        $result = get_string('checkapi_calendars','local_pfc').':<br/>';        try{            $values = $this->get_calendars();            if(is_null ( $values)){                throw new moodle_exception("Return values is null.");            }            $result = $result . '<span style="color:#558b2f;">Working</span>';        }catch (\local_pfc\api_exception $e){            $result = $result.'<pre style="color:#e65100;">';            $result = $result.'<p style="color:#e65100;">'.$e->getOriginalMessage().'</p>';            if($e->getResponseObject()){                $result = $result.'<p>'.$e->getResponseObject().'</p>';            }            $result = $result.'</pre>';        }catch (moodle_exception $e){            $result = $result.'<pre style="color:#f00;">'.$e->getMessage().'</pre>';        }        return $result;    }    /**     *     *     */    function get_calendars() {        $api = new \local_pfc\api\calendar_api();        return $api->get_calendars();    }    /**     *     *     */    function get_evaluations_to_hmtl() {        $result = get_string('checkapi_evaluations','local_pfc').':<br/>';        try{            $values = $this->get_evaluations();            if(is_null ( $values)){                throw new moodle_exception("Return values is null.");            }            $result = $result . '<span style="color:#558b2f;">Working</span>';        }catch (\local_pfc\api_exception $e){            $result = $result.'<pre style="color:#e65100;">';            $result = $result.'<p style="color:#e65100;">'.$e->getOriginalMessage().'</p>';            if($e->getResponseObject()){                $result = $result.'<p>'.$e->getResponseObject().'</p>';            }            $result = $result.'</pre>';        }catch (moodle_exception $e){            $result = $result.'<pre style="color:#f00;">'.$e->getMessage().'</pre>';        }        return $result;    }    /**     *     *     */    function get_evaluations() {        $api = new \local_pfc\api\evaluation_api();        return $api->get_evaluations();    }    /**     *     *     */    function get_evaluation_types_to_hmtl() {        $result = get_string('checkapi_evaluationTypes','local_pfc').':<br/>';        try{            $values = $this->get_evaluation_types();            if(is_null ( $values)){                throw new moodle_exception("Return values is null.");            }            $result = $result . '<span style="color:#558b2f;">Working</span>';        }catch (\local_pfc\api_exception $e){            $result = $result.'<pre style="color:#e65100;">';            $result = $result.'<p style="color:#e65100;">'.$e->getOriginalMessage().'</p>';            if($e->getResponseObject()){                $result = $result.'<p>'.$e->getResponseObject().'</p>';            }            $result = $result.'</pre>';        }catch (moodle_exception $e){            $result = $result.'<pre style="color:#f00;">'.$e->getMessage().'</pre>';        }        return $result;    }    /**     *     *     */    function get_evaluation_types() {        $api = new \local_pfc\api\evaluation_type_api();        return $api->get_evaluation_types();    }    /**     *     *     */    function synchronize_evaluation_calendars_to_hmtl() {        $result = $this->synchronize_evaluation_calendars();        $html = "<p>Synchronized [";        $html = $html."<span style='color:#558b2f'>Evaluations: ".$result->evaluations."</span>, ";        $html = $html."<span style='color:#e65100'>Errors: ".$result->errors."</span>";        $html = $html."]</p>";        return $html;    }    /**     *     *     */    function synchronize_evaluation_calendars() {        $result = new stdClass();        $result->evaluations = 0;        $result->errors = 0;        $calendar_event = new \calendar_event();        try{            // $calendars = $this->get_calendars();            $evaluations = $this->get_evaluations();            /*            for ($i = 1; $i <= 5; $i++) {                $evaluation = new \local_pfc\models\evaluation();                $evaluation->setIdCalendario($i);                $evaluation->setDataInicio('2016-06-0'.$i.' 09:30:00');                $evaluation->setDataFim('2016-06-0'.$i.' 12:00:00');                $evaluation->setDescricao('Descrição do evento '.$i);                $evaluation->setLocal('OUTROLOCAL');                $evaluation->setTipoSala('');                $evaluation->setIdTipoAvaliacao('d290e2beffcb44fea551e6088080c689');                $evaluation->setIdUnidadeCurricular('41241');                $evaluation->setCodigoSiges('9002106');                $evaluations[] = $evaluation;            }*/            $evaluation_types = $this->get_evaluation_types();            foreach ($evaluations as $evaluation){                $event = new stdClass();                $event->id = 0;                // name                $getter = \local_pfc\models\evaluation_type::$getters['id'];                $evaluation_type = $this->get_element_from_iteration(                    $evaluation_types, $getter, $evaluation->getIdTipoAvaliacao());                $event->name = !is_null($evaluation_type) ? $evaluation_type->getDescricao() : '';                // description, format                $event->description = $evaluation->getDescricao();                $event->format = 1;                // course id                $event->courseid = 2;                $event->userid = 0;                // modulename, event type                $event->modulename = 0;                $event->eventtype = "course";                // Time stamps                $time_start = new DateTime($evaluation->getDataInicio(), new DateTimeZone('Europe/Rome'));                $time_start_stamp = $time_start->getTimestamp();                $time_end = new DateTime($evaluation->getDataFim(), new DateTimeZone('Europe/Rome'));                $time_end_stamp = $time_end->getTimestamp();                $event->timestart = $time_start_stamp;                if($time_end_stamp){                    $event->timeduration = $time_end_stamp - $time_start_stamp;                }                // Insert event                $result->evaluations++;                if(!$calendar_event->update($event))                    $result->errors++;            }            return $result;        } catch (moodle_exception $e){            throw $e; // for debugging        }    }    private function get_element_from_iteration($elements, $property_getter, $comparation_value){        $result = NULL;        foreach ($elements as $element){            if($element->$property_getter() == $comparation_value){                $result = $element;                break;            }        }        return $result;    }}